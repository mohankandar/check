<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.5</version>
		<relativePath />
	</parent>

	<groupId>gov.va.bip.framework</groupId>
	<artifactId>bip-framework-parentpom</artifactId>
	<packaging>pom</packaging>
	<version>4.20.0</version>
	<name>${project.artifactId}</name>
	<description>Parent POM for BIP Application Framework - Spring Boot and Cloud Enabled</description>

	<properties>

		<log4j2.version>2.17.1</log4j2.version>
		<!-- This version down-grade required to work around POM build errors in
			older versions of STS / Eclipse with spring-boot 2.1.5. Upgrading to latest
			STS / Eclipse version would also solve the issue. -->
		<maven-jar-plugin.version>3.1.1</maven-jar-plugin.version>

		<!-- Configuration properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>

		<!-- nexus properties -->
		<repo.baseurl>https://nexus.dev.bip.va.gov/repository</repo.baseurl>
		<repo.mirror>${repo.baseurl}/maven-public</repo.mirror>
		<repo.release>${repo.baseurl}/maven-releases</repo.release>
		<repo.snapshot>${repo.baseurl}/maven-snapshots</repo.snapshot>

		<!-- Test coverage configuration properties -->
		<jacoco.outputRootDir>${project.basedir}/target/jacoco</jacoco.outputRootDir>
		<jacoco.dataFile>${project.build.directory}/site/jacoco.exec</jacoco.dataFile>
		<jacoco.destFile>${jacoco.dataFile}</jacoco.destFile>
		<jacoco.reportDir>${jacoco.outputRootDir}/jacoco</jacoco.reportDir>
		<sonar.host.url>http://localhost:9000</sonar.host.url>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.coverage.jacoco.xmlReportPaths>**/target/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
		<sonar.profile.java>BIP</sonar.profile.java>
		<sonar.coverage.exclusions>**/api/v*/transfer/**/*,**/*Application.java,**/*AbstractRemoteServiceCallMock.java</sonar.coverage.exclusions>
		<sonar.exclusions>**/api/v*/transfer/**/*,**/*Application.java,**/*AbstractRemoteServiceCallMock.java</sonar.exclusions>
		<sonar.test.exclusions>**/test/*</sonar.test.exclusions>
		<include.int.tests.pattern>**/*IT.java,**/*Runner.java</include.int.tests.pattern>

		<!-- Code version control configuration -->
		<jgitflow.keepBranch>false</jgitflow.keepBranch>

		<!-- 3rd party maven plugin versions -->
		<!-- build plugins -->
		<lifecycle.mapping.version>1.0.0</lifecycle.mapping.version>
		<templating-maven-plugin.version>1.0.0</templating-maven-plugin.version>

		<!-- WARNING cannot upgrade jaxb2-maven-plugin to 2.x because partner xsd+wsdl
			are not compliant -->
		<jaxb2-maven-plugin-codehaus.version>1.5</jaxb2-maven-plugin-codehaus.version>
		<maven-jaxb2-plugin-jvnet.version>0.14.0</maven-jaxb2-plugin-jvnet.version>
		<krasa-jaxb-tools.version>1.5</krasa-jaxb-tools.version>
		<jaxb2-basics-annotate.version>1.1.0</jaxb2-basics-annotate.version>

		<jaxws-api.version>2.3.1</jaxws-api.version>
		<joda-time.version>2.9</joda-time.version>
		<saaj-impl.version>1.5.1</saaj-impl.version>

		<!-- build pipeline plugins -->
		<sonar-maven-plugin.version>3.9.1.2184</sonar-maven-plugin.version>
		<sca-maven-plugin.version>19.2.0</sca-maven-plugin.version>
		<dockerfile-maven-plugin.version>1.4.4</dockerfile-maven-plugin.version>

		<!-- instrumentation plugins -->
		<spring-metrics.version>0.5.1.RELEASE</spring-metrics.version>
		<prometheus.version>0.5.0</prometheus.version>

		<!-- testing - unit / integration / performance -->
		<site-maven-plugin.version>0.12</site-maven-plugin.version>
		<maven-deploy-plugin.version>3.0.0-M1</maven-deploy-plugin.version>
		<mockito-core.version>3.7.0</mockito-core.version>
		<maven-surefire-plugin.version>3.0.0-M3</maven-surefire-plugin.version>
		<surefire-junit47.version>3.0.0-M5</surefire-junit47.version>
		<maven-cucumber-reporting.version>5.4.0</maven-cucumber-reporting.version>
		<jacoco-maven-plugin.version>0.8.6</jacoco-maven-plugin.version>
		<jmeter-maven-plugin.version>2.9.0</jmeter-maven-plugin.version>
		<jmeter-maven-plugin.versionRange>[2.8.5,)</jmeter-maven-plugin.versionRange>
		<testng.version>7.3.0</testng.version>
		<cucumber.version>1.2.5</cucumber.version><!-- look into upgrade to 4.x
			version -->
		<junit-vintage-engine.version>5.7.0</junit-vintage-engine.version>

		<!-- application plugins -->
		<spring-cloud-dependencies.version>2021.0.5</spring-cloud-dependencies.version>
		<spring-cloud-aws-dependencies.version>2.3.3</spring-cloud-aws-dependencies.version>
		<resilience4j.springboot2.version>1.7.0</resilience4j.springboot2.version>
		<resilience4j.feign.version>1.7.0</resilience4j.feign.version>
		<jjwt.version>0.9.1</jjwt.version>
		<wss4j.version>1.6.19</wss4j.version>
		<el-impl.version>2.2</el-impl.version>
		<axiom-impl.version>1.3.0</axiom-impl.version>
		<swagger-ui.version>4.2.1</swagger-ui.version>
		<swagger-annotations.version>1.6.2</swagger-annotations.version>
		<openapi.codegen.version>3.3.4</openapi.codegen.version> <!-- TODO: need to update to 5.1.0 : however there are breaking changes-->
		<google.codereplacer.version>1.5.3</google.codereplacer.version>
		<fest-assert.version>2.0M10</fest-assert.version>
		<commons-io.version>2.8.0</commons-io.version>
		<commons-lang3.version>3.11</commons-lang3.version>
		<jackson-databind.version>2.13.4.2</jackson-databind.version>
		<jackson-core.version>2.13.4</jackson-core.version>
		<jackson-annotations.version>2.13.4</jackson-annotations.version>
		<jackson-jsr310.version>2.13.4</jackson-jsr310.version>
		<commons-logging.version>1.2</commons-logging.version>
		<logstash-logback-encoder.version>6.6</logstash-logback-encoder.version><!--
			6.1 to 6.6 -->
		<janino-version>3.0.13</janino-version>
		<logback-classic.version>1.2.3</logback-classic.version>
		<embedded-redis.version>0.6</embedded-redis.version>
		<jfiglet.version>0.0.8</jfiglet.version>
		<httpclient.version>4.5.13</httpclient.version>

		<!-- GitHub server corresponds to entry in ~/.m2/settings.xml -->
		<!-- TEMPORARY TO BE REMOVED ONCE NEXUS REPO IS AVAILABLE -->
		<github.global.server>github</github.global.server>

		<!-- DATABASE related versions -->
		<h2.version>2.1.210</h2.version>
		<postgresql.version>42.5.0</postgresql.version>
		<ojdbc6.version>11.2.0.4</ojdbc6.version><!-- also 11.1.0.7 -->
		<ojdbc7.version>12.1.0.2</ojdbc7.version><!-- also 12.1.0.2 -->
		<ojdbc8.version>12.2.0.1</ojdbc8.version><!-- also 18.1.0, 19.3 -->
		<ojdbc10.version>19.3</ojdbc10.version>
		<!-- Liquibase -->
		<liquibase-core.version>${liquibase.version}</liquibase-core.version>
		<liquibase-hibernate5.version>3.8</liquibase-hibernate5.version>
		<!--
			For liquibase-maven-plugin: versions derived from spring dependencies.
			Required dependencies for various Liquibase Change operations, more may be needed.
			THESE NEED TO BE ADJUSTED IF SPRING IS UPGRADED
		-->
		<validation-api.version>2.0.1.Final</validation-api.version>
		<spring-core.version>5.3.23</spring-core.version>
		<spring-data-jpa.version>2.7.5</spring-data-jpa.version>
		<spring-ws.version>3.1.4</spring-ws.version>
		<spring-security.version>5.7.5</spring-security.version>
		<!-- Misc -->
		<lifecycle-mapping.version>1.0.0</lifecycle-mapping.version>
		<google-auto-service.version>1.0-rc6</google-auto-service.version>
		<google-gson.version>2.10</google-gson.version>
		<google-compile-testing.version>0.18</google-compile-testing.version>

		<!-- Twistlock fixes if there are any major version bumps this should be rechecked -->
		<netty-codec.version>4.1.68.Final</netty-codec.version>
		<snakeyaml.version>1.33</snakeyaml.version>
		<cryptacular.version>1.2.4</cryptacular.version>
		<jetty-io.version>9.4.12.v20180830</jetty-io.version>
		<org.apache.commons.version>1.21</org.apache.commons.version>
	</properties>

	<repositories>
		<repository>
			<id>nexus3</id>
			<name>BIP Nexus Repository</name>
			<url>${repo.mirror}</url>
		</repository>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-cloud</id>
			<name>Spring Cloud</name>
			<url>https://github.com/spring-cloud</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>maven-central</id>
			<name>Maven Central</name>
			<url>https://repo1.maven.org/maven2/</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>nexus3</id>
			<name>BIP Nexus Repository</name>
			<url>${repo.mirror}</url>
		</pluginRepository>
		<pluginRepository>
			<releases>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>central</id>
			<name>Maven Central</name>
			<url>https://repo1.maven.org/maven2</url>
			<layout>default</layout>
		</pluginRepository>
		<pluginRepository>
			<releases>
				<updatePolicy>never</updatePolicy>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>spring-plugins</id>
			<name>Spring Plugin Repo</name>
			<url>https://repo.spring.io/plugins-release</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<repository>
			<id>nexus3</id>
			<url>${repo.release}</url>
		</repository>
		<snapshotRepository>
			<id>nexus3</id>
			<url>${repo.snapshot}</url>
		</snapshotRepository>
	</distributionManagement>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.tomcat.embed</groupId>
				<artifactId>tomcat-embed-core</artifactId>
				<version>9.0.60</version>
			</dependency>
			<!-- Twistlock fix for CVE-2021-36090, CVE-2021-35517, CVE-2021-35516, CVE-2021-35515 found in version 1.19 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-compress</artifactId>
				<version>${org.apache.commons.version}</version>
			</dependency>
			<!-- Twistlock fix for CVE-2020-11612, CVE-2019-20444, and CVE-2019-20445 found in version 4.1.43.Final -->
			<dependency>
				<groupId>io.netty</groupId>
				<artifactId>netty-codec</artifactId>
				<version>${netty-codec.version}</version>
			</dependency>
			<!-- Twistlock fix for CVE-2017-18640 found in versions 1.23 / 1.16 -->
			<dependency>
				<groupId>org.yaml</groupId>
				<artifactId>snakeyaml</artifactId>
				<version>${snakeyaml.version}</version>
			</dependency>
			<!-- Twistlock fix for 35 vulnerabilities found in versions 2.9.6 / 2.9.10.1 -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson-databind.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson-core.version}</version>
			</dependency>
			<dependency>
			    <groupId>com.fasterxml.jackson.core</groupId>
			    <artifactId>jackson-annotations</artifactId>
			    <version>${jackson-annotations.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-jsr310</artifactId>
				<version>${jackson-jsr310.version}</version>
			</dependency>
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda-time.version}</version>
			</dependency>
			<!-- Twistlock fix for CVE-2020-7226 found in version 1.1.1 -->
			<dependency>
				<groupId>org.cryptacular</groupId>
				<artifactId>cryptacular</artifactId>
				<version>${cryptacular.version}</version>
			</dependency>
			<!-- Spring Cloud -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- Spring Cloud AWS -->
			<dependency>
				<groupId>io.awspring.cloud</groupId>
				<artifactId>spring-cloud-aws-dependencies</artifactId>
				<version>${spring-cloud-aws-dependencies.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- LogBack dependencies -->
			<dependency>
				<groupId>net.logstash.logback</groupId>
				<artifactId>logstash-logback-encoder</artifactId>
				<version>${logstash-logback-encoder.version}</version>
				<exclusions>
					<exclusion>
						<groupId>ch.qos.logback</groupId>
						<artifactId>logback-core</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-core</artifactId>
				<version>${logback.version}</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.janino</groupId>
				<artifactId>janino</artifactId>
				<version>${janino-version}</version>
			</dependency>
			<!-- Embedded REDIS -->
			<dependency>
				<groupId>com.github.kstyrc</groupId>
				<artifactId>embedded-redis</artifactId>
				<version>${embedded-redis.version}</version>
			</dependency>
			<!-- Apache Common IO dependency -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			<!-- Apache Commons Logging -->
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${commons-logging.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${httpclient.version}</version>
			</dependency>
			<!-- 3rd party for ascii art enhanced logging -->
			<dependency>
				<groupId>com.github.lalyos</groupId>
				<artifactId>jfiglet</artifactId>
				<version>${jfiglet.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.ws.security</groupId>
				<artifactId>wss4j</artifactId>
				<version>${wss4j.version}</version>
			</dependency>
			<dependency>
			    <groupId>com.google.auto.service</groupId>
			    <artifactId>auto-service</artifactId>
			    <version>${google-auto-service.version}</version>
			    <optional>true</optional>
			</dependency>
			<dependency>
			    <groupId>com.google.code.gson</groupId>
			    <artifactId>gson</artifactId>
			     <version>${google-gson.version}</version>
			</dependency>
			<!-- unit test dependencies -->
			<dependency>
			    <groupId>org.junit.vintage</groupId>
			    <artifactId>junit-vintage-engine</artifactId>
			    <version>${junit-vintage-engine.version}</version>
			    <scope>test</scope>
			    <exclusions>
			        <exclusion>
			            <groupId>org.hamcrest</groupId>
			            <artifactId>hamcrest-core</artifactId>
			        </exclusion>
			    </exclusions>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito-core.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.google.testing.compile</groupId>
	  			<artifactId>compile-testing</artifactId>
	  			<version>${google-compile-testing.version}</version>
	  			<scope>test</scope>
			</dependency>
			<!-- Micormeter core dependecy -->
			<dependency>
				<groupId>io.micrometer</groupId>
				<artifactId>micrometer-core</artifactId>
				<version>${micrometer.version}</version>
			</dependency>
			<!-- Micrometer Prometheus registry -->
			<dependency>
				<groupId>io.micrometer</groupId>
				<artifactId>micrometer-registry-prometheus</artifactId>
				<version>${micrometer.version}</version>
				<scope>runtime</scope>
			</dependency>
			<!-- OpenAPI Tools -->
			<dependency>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator-cli</artifactId>
				<version>${openapi.codegen.version}</version>
			</dependency>
			<dependency>
				<groupId>org.openapitools</groupId>
				<artifactId>openapi-generator</artifactId>
				<version>${openapi.codegen.version}</version>
			</dependency>
			<dependency>
				<groupId>io.github.resilience4j</groupId>
				<artifactId>resilience4j-spring-boot2</artifactId>
				<version>${resilience4j.springboot2.version}</version>
			</dependency>
			<dependency>
				<groupId>io.github.resilience4j</groupId>
				<artifactId>resilience4j-feign</artifactId>
				<version>${resilience4j.feign.version}</version>
			</dependency>
		
			<!-- DATABASE related dependencies -->
			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
				<scope>runtime</scope>
				<version>${h2.version}</version> <!-- Need version >= 1.4.198 for row_number analytic -->
			</dependency>
			<dependency>
				<groupId>org.postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>${postgresql.version}</version>
			</dependency>
			<dependency>
				<!-- Oracle 11.1.x is on TRM Unapproved list -->
				<!-- Oracle 11.2.x is on TRM Divest schedule -->
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc6</artifactId>
				<version>${ojdbc6.version}</version>
			</dependency>
			<dependency>
				<!-- Oracle 12.1.x is on TRM Divest schedule -->
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc7</artifactId>
				<version>${ojdbc7.version}</version>
			</dependency>
			<dependency>
				<!-- Oracle 12.2.x is on TRM Divest schedule -->
				<!-- Oracle 18.1.0 or 19.3 is TRM Approved -->
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc8</artifactId>
				<version>${ojdbc8.version}</version>
			</dependency>
			<dependency>
				<!-- Oracle 19.3 is TRM Approved -->
				<groupId>com.oracle</groupId>
				<artifactId>ojdbc10</artifactId>
				<version>${ojdbc10.version}</version>
			</dependency>
			<dependency>
				<groupId>org.liquibase</groupId>
				<artifactId>liquibase-core</artifactId>
				<version>${liquibase-core.version}</version>
			</dependency>
			<dependency>
				<groupId>org.liquibase.ext</groupId>
				<artifactId>liquibase-hibernate5</artifactId>
				<version>${liquibase-hibernate5.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.liquibase</groupId>
						<artifactId>liquibase-core</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- WebService related dependencies -->
			<dependency>
				<groupId>javax.xml.ws</groupId>
				<artifactId>jaxws-api</artifactId>
				<version>${jaxws-api.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.xml.messaging.saaj</groupId>
				<artifactId>saaj-impl</artifactId>
				<version>${saaj-impl.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<finalName>${project.artifactId}</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*</include>
				</includes>
				<excludes>
					<exclude>**/cert/*</exclude>
					<exclude>**/*.jks</exclude>
					<exclude>**/vetservices-document-inttest/src/inttest/resources/documents/*</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources/cert</directory>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>**/*.jks</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<!-- repackages jar and war plugins so they can be executed with command
				line -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>build-info</id>
						<goals>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<configuration>
					<verbose>false</verbose>
					<excludeProperties>
						<excludeProperty>git.build.user.*</excludeProperty>
						<excludeProperty>git.commit.user.*</excludeProperty>
					</excludeProperties>
					<useNativeGit>false</useNativeGit>
					<failOnNoGitDirectory>false</failOnNoGitDirectory>
					<failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<failOnError>false</failOnError>
					<doclint>none</doclint>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifestEntries>
							<Build-Time>${maven.build.timestamp}</Build-Time>
							<Implementation-Version>${project.version}</Implementation-Version>
							<Implementation-GIT-Revision>${GIT_COMMIT}</Implementation-GIT-Revision>
							<Implementation-Build-Number>${BUILD_NUMBER}</Implementation-Build-Number>
						</manifestEntries>
					</archive>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>${skipTests}</skipTests>
					<!--TODO: This line currently breaks Sonar. Leave commented out until solution is found.-->
					<!--<argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>-->
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<!-- Add a new inttest source directory to our build -->
					<execution>
						<id>add-integration-test-sources</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/inttest/java</source>
							</sources>
						</configuration>
					</execution>
					<!-- Add a new inttest resource directory to our build -->
					<execution>
						<id>add-integration-test-resources</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<filtering>true</filtering>
									<directory>src/inttest/resources</directory>
									<includes>
										<include>**/*</include>
									</includes>
									<excludes>
										<exclude>**/documents/*</exclude>
									</excludes>
								</resource>
								<resource>
									<targetPath>documents</targetPath>
									<directory>src/inttest/resources/documents</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
					<!-- add the parsed version properties into the build environment for
						usage as needed -->
					<execution>
						<phase>initialize</phase>
						<id>parse-version</id>
						<goals>
							<goal>parse-version</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar</goal>
							<goal>test-jar</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/sources</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar-maven-plugin.version}</version>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<configuration>
					<destFile>${jacoco.dataFile}</destFile>
					<append>true</append>
					<excludes>
						<exclude>**/static/features/**/*</exclude>
						<exclude>**com.steadystate*</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<dataFile>${jacoco.dataFile}</dataFile>
							<outputDirectory>${jacoco.reportDir}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>enforce-dependency-convergence</id>
						<configuration>
							<rules>
								<dependencyConvergence/>
							</rules>
						</configuration>
						<goals>
							<goal>enforce</goal>
						</goals>
					</execution>
					<execution>
						<id>enforce-no-snapshots</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireReleaseDeps>
									<message>No Snapshot Dependencies Allowed!</message>
									<onlyWhenRelease>true</onlyWhenRelease>
									<failWhenParentIsSnapshot>true</failWhenParentIsSnapshot>
								</requireReleaseDeps>
							</rules>
							<fail>true</fail>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<!-- NOTE: These plugins will be removed from future versions of the super
				POM -->
			<!-- They are kept for the moment as they are very unlikely to conflict
				with lifecycle mappings (MNG-4453) -->
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
							<configuration>
								<skipTests>${skipITs}</skipTests>
								<includes>
									<include>${include.int.tests.pattern}</include>
								</includes>
								<suiteXmlFiles>
									<suiteXmlFile>src/inttest/resources/testng.xml</suiteXmlFile>
								</suiteXmlFiles>
								<parallel>classes</parallel>
								<forkCount>10</forkCount>
								<reuseForks>false</reuseForks>
								<threadCount>10</threadCount>
								<systemPropertyVariables>
									<cucumber.options>${cucumber.options}</cucumber.options>
									<test.env>${test.env}</test.env>
								</systemPropertyVariables>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>net.masterthought</groupId>
					<artifactId>maven-cucumber-reporting</artifactId>
					<version>${maven-cucumber-reporting.version}</version>
					<executions>
						<execution>
							<id>execution</id>
							<phase>verify</phase>
							<goals>
								<goal>generate</goal>
							</goals>
							<configuration>
								<skip>${skipITs}</skip>
								<projectName>${project.artifactId}</projectName>
								<outputDirectory>${project.build.directory}/site/cucumber-reports
								</outputDirectory>
								<inputDirectory>${project.build.directory}/site
								</inputDirectory>
								<jsonFiles>**/*.json</jsonFiles>
								<skippedFails>true</skippedFails>
								<enableFlashCharts>false</enableFlashCharts>
								<buildNumber>${project.version}</buildNumber>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<!-- NOTE: Plugins for JMeter Performance Tests -->
				<plugin>
					<groupId>com.lazerycode.jmeter</groupId>
					<artifactId>jmeter-maven-plugin</artifactId>
					<version>${jmeter-maven-plugin.version}</version>
					<configuration>
						<skipTests>${skipPerfTests}</skipTests>
						<!-- Enable JMeter reports -->
						<generateReports>true</generateReports>
						<!-- To simplify debugging, it is advisable to adapt the loglevel.
							The jmeter logs are written to the file jmeter.log. -->
						<overrideRootLogLevel>DEBUG</overrideRootLogLevel>
						<!-- By default, the console output during a jmeter test run is suppressed.
							We want to display the progress using the listener "Generate Summary Results"
							(which periodically prints stats to stdout). Therefore we have to make sure,
							that the jmeter output is not suppressed. -->
						<suppressJMeterOutput>false</suppressJMeterOutput>
						<jmeterLogLevel>DEBUG</jmeterLogLevel>
						<jMeterProcessJVMSettings>
							<arguments>
								<argument>-Djavax.net.ssl.keyStore=${javax.net.ssl.keyStore}</argument>
								<argument>-Djavax.net.ssl.keyStorePassword=${javax.net.ssl.keyStorePassword}</argument>
							</arguments>
						</jMeterProcessJVMSettings>
						<!-- Configuration will fail build only if error rate is higher than
							1%. -->
						<errorRateThresholdInPercent>1</errorRateThresholdInPercent>
					</configuration>
					<executions>
						<!-- Configure JMeter tests -->
						<execution>
							<id>jmeter-configuration</id>
							<goals>
								<goal>configure</goal>
							</goals>
						</execution>
						<!-- Run JMeter tests -->
						<execution>
							<id>jmeter-tests</id>
							<goals>
								<goal>jmeter</goal>
							</goals>
						</execution>
						<!-- Fail build on errors in test -->
						<execution>
							<id>jmeter-check-results</id>
							<goals>
								<goal>results</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- DATABASE related plugins -->
				<plugin>
					<groupId>org.liquibase</groupId>
					<artifactId>liquibase-maven-plugin</artifactId>
					<version>${liquibase-core.version}</version>
					<!-- Required dependencies for various Change operations -->
					<dependencies>
						<dependency>
							<groupId>org.liquibase.ext</groupId>
							<artifactId>liquibase-hibernate5</artifactId>
							<version>${liquibase-hibernate5.version}</version>
							<exclusions>
								<exclusion>
									<groupId>org.liquibase</groupId>
									<artifactId>liquibase-core</artifactId>
								</exclusion>
							</exclusions>
						</dependency>
						<dependency>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>${validation-api.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework</groupId>
							<artifactId>spring-core</artifactId>
							<version>${spring-core.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework</groupId>
							<artifactId>spring-context</artifactId>
							<version>${spring-core.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework</groupId>
							<artifactId>spring-beans</artifactId>
							<version>${spring-core.version}</version>
						</dependency>
						<dependency>
							<groupId>org.springframework.data</groupId>
							<artifactId>spring-data-jpa</artifactId>
							<version>${spring-data-jpa.version}</version>
						</dependency>
						<dependency>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-core</artifactId>
							<version>${hibernate.version}</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	<profiles>
		<!-- DEPRECATED ... -->
		<profile>
			<id>fortify</id>
			<!-- Antrun plugin that runs fortify scans via ant. The fortify scans
				are run using the sourceanalyzer and FPRUtility commandline applications
				for now, so Fortify SCA will need to be installed before running -->
			<properties>
				<fortify-build-utils.version>1.2</fortify-build-utils.version>
				<fortify.scanEnabled>true</fortify.scanEnabled>
				<fortify.jre64>true</fortify.jre64>
				<fortify.debug>false</fortify.debug>
				<fortify.maxHeap>1024m</fortify.maxHeap>
				<fortify.maxPermGen>512m</fortify.maxPermGen>
				<settings.file.location>${user.home}/.m2/settings.xml</settings.file.location>
				<fortify.upload>false</fortify.upload> <!-- pass as -D from build server where upload is desired -->
				<fortify.token>REPLACE WITH REAL VALUE IN SETTINGS.XML OR -D PARAM</fortify.token>
				<fortify.url>REPLACE WITH REAL VALUE IN SETTINGS.XML OR -D PARAM</fortify.url>
			</properties>
			<build>
				<plugins>
					<plugin>
						<!-- fortify 19.1.0: groupId changed from "com.hpe.security.fortify.maven.plugin" to "com.fortify.sca.plugins.maven" -->
						<groupId>com.fortify.sca.plugins.maven</groupId>
						<artifactId>sca-maven-plugin</artifactId>
						<version>${sca-maven-plugin.version}</version>
						<configuration>
							<scanEnabled>${fortify.scanEnabled}</scanEnabled>
							<projectName>${project.artifactId}</projectName>
							<projectVersion>${parsedVersion.majorVersion}.${parsedVersion.minorVersion}</projectVersion>
							<upload>${fortify.upload}</upload>
							<f360Url>${fortify.url}</f360Url>
							<f360AuthToken>${fortify.token}</f360AuthToken>
							<jre64>${fortify.jre64}</jre64>
							<debug>${fortify.debug}</debug>
							<maxHeap>${fortify.maxHeap}</maxHeap>
							<maxPermGen>${fortify.maxPermGen}</maxPermGen>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>fortify-scan</id>
								<configuration>
									<target>
										<property name="dir.scripts" value="target/antscripts" />
										<property name="fortify.util.version" value="${fortify-build-utils.version}" />
										<property name="fortify.util.jar.path"
											value="${gov.va.vetservices.fortify-build-utils:fortify-build-utils:jar}" />
										<property name="settings.file.location" value="${settings.file.location}" />

										<basename property="fortify.util.jar.filename" file="${fortify.util.jar.path}" />

										<echo message="Using the fortify-build-utils file path: ${fortify.util.jar.path}" />
										<echo message="Version: ${fortify.util.version}" />
										<echo message="File name: ${fortify.util.jar.filename}" />
										<echo message="Clean ${dir.scripts}" />
										<delete dir="${dir.scripts}" />
										<mkdir dir="${dir.scripts}" />
										<copy todir="${dir.scripts}" flatten="true" overwrite="true" file="${fortify.util.jar.path}" />

										<unzip src="${dir.scripts}/${fortify.util.jar.filename}" dest="${dir.scripts}" failOnEmptyArchive="true">
											<mapper type="flatten" />
											<patternset>
												<include name="**/**/*.xml" />
											</patternset>
										</unzip>

										<property name="local.ant.lib" value="target/antlib" />
										<mkdir dir="${local.ant.lib}" />
										<get
											src="http://search.maven.org/remotecontent?filepath=org/eclipse/aether/aether-ant-tasks/1.0.0.v20140518/aether-ant-tasks-1.0.0.v20140518-uber.jar"
											dest="${local.ant.lib}/aether-ant-tasks-uber.jar" verbose="true" skipexisting="true" />
										<fail
											message="Checksum mismatch for 'target/antlib/aether-ant-tasks-uber.jar'. Please delete it and rerun ant to redownload."
										>
											<condition>
												<not>
													<checksum file="${local.ant.lib}/aether-ant-tasks-uber.jar" algorithm="SHA"
														property="95dadd03392a75564904da45108cf048abe6e5bb" verifyproperty="checksum.matches" />
												</not>
											</condition>
										</fail>

										<echo message="Running antfile ${dir.scripts}/fortify.xml" />
										<ant antfile="${dir.scripts}/fortify.xml">
											<property name="mvn.project.settings" value="${settings.file.location}" />
										</ant>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>gov.va.vetservices.fortify-build-utils</groupId>
					<artifactId>fortify-build-utils</artifactId>
					<version>${fortify-build-utils.version}</version>
					<scope>provided</scope>
				</dependency>
			</dependencies>
		</profile>
		<!-- ... deprecated -->

		<!--
			The fortify-sca profile runs the aggregate scan for all modules.
			If a project team believes that the fortify-sca profile requires ANY changes,
			please consult with the BIP Framework development team.
			Base Fortify requirements for all project modules are declared in bip-framework-parentpom.
		-->
		<profile>
			<id>fortify-sca</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<!-- Don't run tests from SCA - profile should be run as: "mvn install -P fortify-sca" -->
				<skipTests>true</skipTests>
				<skipITs>true</skipITs>
				<skipPerfTests>true</skipPerfTests>
				<fortify.bind.phase>initialize</fortify.bind.phase>
			</properties>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>com.fortify.sca.plugins.maven</groupId>
							<artifactId>sca-maven-plugin</artifactId>
							<version>${sca-maven-plugin.version}</version>
							<dependencies>
								<!-- Fortify 19.2.0: Force the sca plugin to use an up-to-date version of plexus-utils -->
								<dependency>
									<groupId>org.codehaus.plexus</groupId>
									<artifactId>plexus-utils</artifactId>
									<version>3.3.0</version>
								</dependency>
							</dependencies>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>com.fortify.sca.plugins.maven</groupId>
						<artifactId>sca-maven-plugin</artifactId>
						<version>${sca-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>fortify-sca-clean</id>
								<phase>${fortify.bind.phase}</phase>
								<goals>
									<goal>clean</goal>
								</goals>
								<configuration>
									<aggregate>true</aggregate>
									<debug>true</debug>
									<verbose>true</verbose>
									<!-- exclude LocalstackAutoConfigurationImpl.java as it only handles local test scenarios -->
									<excludes>**/LocalstackAutoConfigurationImpl.java</excludes>
								</configuration>
							</execution>
							<execution>
								<id>fortify-sca-translate</id>
								<phase>${fortify.bind.phase}</phase>
								<goals>
									<goal>translate</goal>
								</goals>
								<configuration>
									<!-- run scans against all reactor projects -->
									<aggregate>true</aggregate>
									<debug>true</debug>
									<verbose>true</verbose>
									<!-- exclude LocalstackAutoConfigurationImpl.java as it only handles local test scenarios -->
									<excludes>**/LocalstackAutoConfigurationImpl.java</excludes>
								</configuration>
							</execution>
							<execution>
								<id>fortify-sca-scan</id>
								<phase>${fortify.bind.phase}</phase>
								<goals>
									<goal>scan</goal>
								</goals>
								<configuration>
									<!-- run scans against all reactor projects -->
									<aggregate>true</aggregate>
									<debug>true</debug>
									<verbose>true</verbose>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>docker-jar-project</id>
			<activation>
				<file><!-- add a file named .docker-jar-project-marker to war projects
						to activate this profile -->
					<exists>${basedir}/.docker-jar-project-marker</exists>
				</file>
			</activation>
			<properties>
				<!-- Only unit tests are run when the docker-jar-project profile is active -->
				<skipTests>false</skipTests>
				<skipITs>true</skipITs>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.spotify</groupId>
						<artifactId>dockerfile-maven-plugin</artifactId>
						<version>${dockerfile-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>default</id>
								<goals>
									<goal>build</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<repository>bipdev/${project.artifactId}</repository>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- The Configuration of the development profile -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<!-- Only unit tests are run when the development profile is active -->
				<skipTests>false</skipTests>
				<skipITs>true</skipITs>
				<skipPerfTests>true</skipPerfTests>
			</properties>
		</profile>
		<!-- The Configuration of the inttest profile -->
		<profile>
			<id>inttest</id>
			<properties>
				<!-- Only int tests are run when this inttest profile is active -->
				<skipTests>true</skipTests>
				<skipITs>false</skipITs>
				<skipPerfTests>true</skipPerfTests>
			</properties>
		</profile>
		<!-- The Configuration of the perftest profile -->
		<profile>
			<id>perftest</id>
			<properties>
				<!-- Only int tests are run when this inttest profile is active -->
				<skipTests>true</skipTests>
				<skipITs>true</skipITs>
				<skipPerfTests>false</skipPerfTests>
			</properties>
		</profile>
		<!-- Temporary Configuration to deploy libraries to MAVEN repository until
			VA SOCKS Proxy Issue is resolved -->
		<profile>
			<id>local-deploy</id>
			<properties>
				<!-- Only unit tests are run -->
				<skipTests>false</skipTests>
				<skipITs>true</skipITs>
				<skipPerfTests>true</skipPerfTests>
				<repositoryName>bip-framework</repositoryName>
				<repositoryOwner>department-of-veterans-affairs</repositoryOwner>
			</properties>
			<build>
				<plugins>
					<!-- TEMPORARY GITHUB PLUGIN TO BE REMOVED ONCE NEXUS REPO IS AVAILABLE -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-deploy-plugin</artifactId>
						<version>${maven-deploy-plugin.version}</version>
						<configuration>
							<altDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo</altDeploymentRepository>
						</configuration>
					</plugin>
					<!-- TEMPORARY GITHUB PLUGIN TO BE REMOVED ONCE NEXUS REPO IS AVAILABLE -->
					<plugin>
						<groupId>com.github.github</groupId>
						<artifactId>site-maven-plugin</artifactId>
						<version>${site-maven-plugin.version}</version>
						<configuration>
							<message>Maven artifacts for ${project.version}</message>  <!-- git commit message -->
							<noJekyll>true</noJekyll>                                  <!-- disable webpage processing -->
							<outputDirectory>${project.build.directory}/mvn-repo</outputDirectory> <!-- matches distribution management repository url above -->
							<branch>refs/heads/mvn-repo</branch>                       <!-- remote branch name -->
							<includes>
								<include>**/*</include>
							</includes>
							<repositoryName>${repositoryName}</repositoryName>      <!-- github repo name -->
							<repositoryOwner>${repositoryOwner}</repositoryOwner>    <!-- github owner / organization name -->
							<merge>true</merge>
						</configuration>
						<executions>
							<!-- run site-maven-plugin's 'site' target as part of the build's
								normal 'deploy' phase -->
							<execution>
								<goals>
									<goal>site</goal>
								</goals>
								<phase>deploy</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- OpenAPI Specification (OAS) Code generation profile -->
		<profile>
			<id>org-openapitools-codegen-parent</id>
			<activation>
				<!-- Profile is activated if openapi.yml exists -->
				<file>
					<!-- This path is also used in the framework parentpom. If this path
						changes, framework must also be updated. -->
					<exists>${basedir}/src/main/resources/openapi/openapi.yml</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<!-- Download and unpack swagger-ui web jar -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>download-swagger-ui-webjar</id>
								<phase>initialize</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>org.webjars</groupId>
											<artifactId>swagger-ui</artifactId>
											<version>${swagger-ui.version}</version>
											<overWrite>true</overWrite>
										</artifactItem>
									</artifactItems>
									<outputDirectory>${project.build.directory}/classes</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Generate the swagger ui from application yaml spec -->
					<plugin>
						<groupId>org.openapitools</groupId>
						<artifactId>openapi-generator-maven-plugin</artifactId>
						<version>${openapi.codegen.version}</version>
						<executions>
							<execution>
								<id>generate-openapi-spec</id>
								<goals>
									<goal>generate</goal>
								</goals>
								<configuration>
									<inputSpec>${basedir}/src/main/resources/openapi/openapi.yml</inputSpec>
									<validateSpec>true</validateSpec>
									<generatorName>openapi</generatorName>
									<output>${project.build.directory}/classes/META-INF/resources/webjars/swagger-ui</output>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- replace name of the specification file to show -->
					<plugin>
						<groupId>com.google.code.maven-replacer-plugin</groupId>
						<artifactId>replacer</artifactId>
						<version>${google.codereplacer.version}</version>
						<executions>
							<execution>
								<id>replace-tokens-swaggerui</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>replace</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<filesToInclude>
								${project.build.directory}/classes/META-INF/resources/webjars/swagger-ui/index.html,
								${project.build.directory}/classes/META-INF/resources/webjars/swagger-ui/${swagger-ui.version}/index.html
							</filesToInclude>
							<replacements>
								<replacement>
									<token>"https://petstore.swagger.io/v2/swagger.json"</token>
									<value>"openapi.json"</value>
								</replacement>
							</replacements>
						</configuration>
					</plugin>
					<!-- Move generated artifacts to their final location -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-delete-swaggerui</id>
								<phase>compile</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<copy todir="${project.build.directory}/classes/META-INF/resources/webjars/swagger-ui" flatten="true"
											overwrite="true"
										>
											<fileset
												dir="${project.build.directory}/classes/META-INF/resources/webjars/swagger-ui/${swagger-ui.version}" />
										</copy>
										<delete
											dir="${project.build.directory}/classes/META-INF/resources/webjars/swagger-ui/${swagger-ui.version}"
											failonerror="false" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- Add generated source directory for eclipse -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<!-- For eclipse/m2e users: install the m2e connector 'buildhelper'
								by selecting 'Discover new m2e connectors' while hovering over the following
								execution tag -->
							<execution>
								<id>add-generated-source</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>${project.build.directory}/generated-sources/openapi</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
				<!-- the following is only necessary if you are using eclipse and m2e -->
				<pluginManagement>
					<plugins>
						<plugin>
							<groupId>org.eclipse.m2e</groupId>
							<artifactId>lifecycle-mapping</artifactId>
							<version>${lifecycle-mapping.version}</version>
							<configuration>
								<lifecycleMappingMetadata>
									<pluginExecutions>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.openapitools</groupId>
												<artifactId>openapi-generator-maven-plugin</artifactId>
												<versionRange>[${openapi.codegen.version},)</versionRange>
												<goals>
													<goal>generate</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute />
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>com.google.code.maven-replacer-plugin</groupId>
												<artifactId>replacer</artifactId>
												<versionRange>[${google.codereplacer.version},)</versionRange>
												<goals>
													<goal>replace</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute />
											</action>
										</pluginExecution>
										<pluginExecution>
											<pluginExecutionFilter>
												<groupId>org.apache.maven.plugins</groupId>
												<artifactId>maven-antrun-plugin</artifactId>
												<versionRange>[${maven-antrun-plugin.version},)</versionRange>
												<goals>
													<goal>run</goal>
												</goals>
											</pluginExecutionFilter>
											<action>
												<execute />
											</action>
										</pluginExecution>
									</pluginExecutions>
								</lifecycleMappingMetadata>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
			</build>
		</profile>
	</profiles>
</project>
